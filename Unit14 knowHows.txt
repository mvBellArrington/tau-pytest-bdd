In the start of the project, I created a directory specifically for the Unit14 assignment by using the terminal code `mkdir Unit14`

After navigating into the Unit14 directory, I went ahead and cloned the github repo from TAU based on the link provided by the references from the TAU link in WakeTech's Software Quality Assurance class under assignment Unit14. Then, I would go back to my terminal and changed the directory to the tau-pytest-bdd folder. I put in the code `pip install --user pipenv` since the video asks to use this. Make sure that the python version you currently have on your system is the same as the version your cloned repo is looking for. If you have a higher version, just change that string in the Pipefile text file. Installation is complete.

Without changing the directory path, I have added the following code into the terminal:
	pipenv install pytest
	pipenv install pytest-bdd

Navigate to your tests --> features folder where you may find other .feature files. Go ahead and create a new file in that directory called "retirement.feature".

If there is a prompt/notification that tells and asks you to install a "Gherkin" plugin, do so. This will help the new feature file that you've just created. 


Double-click on the retirement.feature component from the side-navigation tree. There, you will copy and paste the line of Gherkin code created in Unit13.

The next and more important thing I would do is setup my remote repo to my github with the following procedures:
	After the repo from TAU has been cloned, fork it.
	Go to your command line and navigate to the cloned repo.
	Place the following codings:
		git remote remove origin
		git remote add origin <name of the git link of your forked repo>
		git add .
		git commit -m "<add your commit comments here>"
		git push -u origin master

This would setup your github repo and all you have to do afterwards after making conisistant changes to your file would be:
	git add .
	git commit -m "<add your commit comments here>"
	git push -u origin master

Back to the pycharm, one thing I have noticed was changing the "Scenario" into "Scenario Outline" in my retirement.feature file. To discover this, I would hover over one of the "Given" lines until a lightbulb icon props up. It will give a suggestion to convert the "Scenario" into "Scenario Outline." Do so where necessary.

You may have to do it to every scenario in that file.

There is a feature associated with the PyCharm Professional Version of the Gherkin which allows the user to generate a test case directly from the Gherkin code. In this instance, I am using the Enterprise version.

